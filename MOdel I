{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "mount_file_id": "1nIw611CtvmHbV1OwtbQoJGhmMUgA8Lqb",
      "authorship_tag": "ABX9TyP3zjoWJOG+sLhuxaqfr8ak",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DanielTrapani/AI-Projects/blob/main/MOdel%20I\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SwtjqIWZV0rB"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as nu\n",
        "\n",
        "# Read the data create the data frame\n",
        "\n",
        "df=pd.read_csv(\"/content/drive/MyDrive/DataSet/Airline_Reviews.csv\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **The Data**\n",
        "A dataset of how would be the Rating each Airlin. Other data would also be nice (Staff_Service\tValue_for_Money, etc)."
      ],
      "metadata": {
        "id": "yIJZHhiXv6eE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe() # Cheack the data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "0iK_9SL9HSz5",
        "outputId": "97a194c0-dd98-423a-ede0-81daaba52221"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Food_&_Beverages  Inflight_Entertainment  Seat_Comfort  Staff_Service  \\\n",
              "count        515.000000              515.000000    515.000000     515.000000   \n",
              "mean           2.518447                1.440777      2.821359       3.067961   \n",
              "std            1.246454                1.199014      1.035898       1.130254   \n",
              "min            0.000000                0.000000      0.000000       0.000000   \n",
              "25%            2.000000                0.000000      2.000000       3.000000   \n",
              "50%            3.000000                1.000000      3.000000       3.000000   \n",
              "75%            3.000000                2.000000      3.000000       4.000000   \n",
              "max            5.000000                5.000000      5.000000       5.000000   \n",
              "\n",
              "       Value_for_Money  Review_Count      Rating  \n",
              "count       515.000000    515.000000  515.000000  \n",
              "mean          2.953398    206.974757    5.100971  \n",
              "std           0.967247    450.330585    1.964049  \n",
              "min           0.000000      1.000000    0.000000  \n",
              "25%           2.000000      6.500000    4.000000  \n",
              "50%           3.000000     33.000000    5.000000  \n",
              "75%           4.000000    165.500000    6.000000  \n",
              "max           5.000000   3748.000000   10.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe1d3298-ceae-47b9-96b4-a8e6ce6319bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Food_&amp;_Beverages</th>\n",
              "      <th>Inflight_Entertainment</th>\n",
              "      <th>Seat_Comfort</th>\n",
              "      <th>Staff_Service</th>\n",
              "      <th>Value_for_Money</th>\n",
              "      <th>Review_Count</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>515.000000</td>\n",
              "      <td>515.000000</td>\n",
              "      <td>515.000000</td>\n",
              "      <td>515.000000</td>\n",
              "      <td>515.000000</td>\n",
              "      <td>515.000000</td>\n",
              "      <td>515.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.518447</td>\n",
              "      <td>1.440777</td>\n",
              "      <td>2.821359</td>\n",
              "      <td>3.067961</td>\n",
              "      <td>2.953398</td>\n",
              "      <td>206.974757</td>\n",
              "      <td>5.100971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.246454</td>\n",
              "      <td>1.199014</td>\n",
              "      <td>1.035898</td>\n",
              "      <td>1.130254</td>\n",
              "      <td>0.967247</td>\n",
              "      <td>450.330585</td>\n",
              "      <td>1.964049</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>6.500000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>165.500000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>3748.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe1d3298-ceae-47b9-96b4-a8e6ce6319bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe1d3298-ceae-47b9-96b4-a8e6ce6319bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe1d3298-ceae-47b9-96b4-a8e6ce6319bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8d7a0dbb-046d-4754-8dde-9c80c361bd34\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d7a0dbb-046d-4754-8dde-9c80c361bd34')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8d7a0dbb-046d-4754-8dde-9c80c361bd34 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Food_&_Beverages\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.2390519024888,\n        \"min\": 0.0,\n        \"max\": 515.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          515.0,\n          2.5184466019417475,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inflight_Entertainment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.54942846297368,\n        \"min\": 0.0,\n        \"max\": 515.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          515.0,\n          1.4407766990291262,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seat_Comfort\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.2346606130395,\n        \"min\": 0.0,\n        \"max\": 515.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          515.0,\n          2.8213592233009708,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Staff_Service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.11705893524416,\n        \"min\": 0.0,\n        \"max\": 515.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          515.0,\n          3.0679611650485437,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value_for_Money\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181.18187640130824,\n        \"min\": 0.0,\n        \"max\": 515.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.9533980582524273,\n          3.0,\n          515.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1270.6585400745582,\n        \"min\": 1.0,\n        \"max\": 3748.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          206.9747572815534,\n          33.0,\n          515.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 180.4842139386144,\n        \"min\": 0.0,\n        \"max\": 515.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.100970873786408,\n          5.0,\n          515.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sum the entire the null values in the cells\n",
        "\n",
        "df.isnull().sum().sum()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Skp8SCePHgSy",
        "outputId": "20575355-2d58-4c29-a2a3-dda424a20755"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "When a linea model is build is good to fiend the strong corelation between the  column we're try to precit and the columns we're trying to use to predict that values because that enables a linera model to make a good prediction .\n",
        "\n"
      ],
      "metadata": {
        "id": "e-SllhHwK6bJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Y = Predicted value --> In this model we going predict the Ration base in previous [ Records ]\n",
        "# X = coulumns we are using top predict -- After check the corelatio we select [ Value_for_Money  ]\n",
        "\n",
        "# Add the column we want to predict and then check the high corelation with the other columns\n",
        "df.corr()[\"Rating\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g9T5VD8ELiBL",
        "outputId": "3535e5c9-7cb2-4949-cb9d-9e1aad18b0ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-1d2c6d169727>:5: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  df.corr()[\"Rating\"]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Food_&_Beverages          0.517388\n",
              "Inflight_Entertainment    0.146295\n",
              "Seat_Comfort              0.625659\n",
              "Staff_Service             0.613897\n",
              "Value_for_Money           0.805385\n",
              "Review_Count             -0.031188\n",
              "Rating                    1.000000\n",
              "Name: Rating, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns # This library help us to make visualization"
      ],
      "metadata": {
        "id": "cyROEkDbXOWy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lmplot(x=\"Value_for_Money\", y=\"Rating\", data=df, fit_reg=True, ci=None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "8VpZrNc6Xbe1",
        "outputId": "2891c2f5-464e-4bd9-a592-8fde55ba3b2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x78367a412fb0>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Coorelation in the last graph is very strong the linea shows the rating incresed according with the value for Money"
      ],
      "metadata": {
        "id": "obCXfsNrYnlM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.plot.hist(y=\"Rating\")\n",
        "\n",
        "# This histagram shows us the distribution of a continuous Rating is very balance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "Y7554D6zY1ko",
        "outputId": "8c28443a-5f2c-4933-bd41-9d177c3bc9ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lets do some data clean checking the rows have some missied values\n",
        "df[df.isnull().any(axis=1)]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "WHUM4RN_Z4_X",
        "outputId": "483b88d2-baf0-4b2f-bdd0-1c9038fc8cac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Airline_Name, Food_&_Beverages, Inflight_Entertainment, Seat_Comfort, Staff_Service, Value_for_Money, Review_Count, Rating]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7a16c34-50ae-4f16-9f3d-3fe6399b5f27\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Airline_Name</th>\n",
              "      <th>Food_&amp;_Beverages</th>\n",
              "      <th>Inflight_Entertainment</th>\n",
              "      <th>Seat_Comfort</th>\n",
              "      <th>Staff_Service</th>\n",
              "      <th>Value_for_Money</th>\n",
              "      <th>Review_Count</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7a16c34-50ae-4f16-9f3d-3fe6399b5f27')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7a16c34-50ae-4f16-9f3d-3fe6399b5f27 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7a16c34-50ae-4f16-9f3d-3fe6399b5f27');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are no missed values in our data frame if you want to de dropp this missed values use the next code : df=df.drop()"
      ],
      "metadata": {
        "id": "kMgRXViQahQR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SPLIT\n",
        "# Bassicly we split the data in two\n",
        "# One part is to TRAIN de MOdel\n",
        "# Other part is to TEST MOdel\n",
        "\n",
        "TRAIN = df[df[\"Review_Count\"] < 1650].copy()\n",
        "TEST = df[df[\"Review_Count\"] >= 100].copy()\n",
        "\n",
        "\n",
        "\n",
        "# We take the [Review_Count] and divide which have more or igual than 1650 Review_Count as a TESTING\n",
        "# and which have menos or 1 Review_Count as a TRAINING\n"
      ],
      "metadata": {
        "id": "UyuNgeOba5J3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# THe comand shape tell us the amount of columns and rows\n",
        "TRAIN.shape\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sa9Uofuxd5c6",
        "outputId": "9e906cf7-a8f5-4968-f844-2f1cf634d233"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(503, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TEST.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XzFzomVPeNxi",
        "outputId": "d30dfd9f-d549-4d8b-ef25-764c5033ccf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(153, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To train the MOdel we import LinearRegression from sklearn.linear_model\n",
        "# the linearRegression class help us to train the model and make predictions\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "reg= LinearRegression\n",
        "\n",
        "# Initiacile the LinearRegression Class\n",
        "reg= LinearRegression()"
      ],
      "metadata": {
        "id": "C9rHsTYbfdvY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the predictors and the targets\n",
        "# in this models the target to be predicted is the Rating\n",
        "# We going to use [] and [] to do that\n",
        "\n",
        "predictors=[\"Food_&_Beverages\",\"Value_for_Money\"]\n",
        "\n",
        "#Sumaries we use \"Food_&_Beverages\",\"Staff_Service\",\"Value_for_Money\" to predict Rating"
      ],
      "metadata": {
        "id": "mrN-Hcb2f0cV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jh2mw41TwlA3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# The the Fit method actually will fit the linear regression MOdel\n",
        "\n",
        "reg.fit(TRAIN[predictors], TRAIN[\"Rating\"])\n",
        "\n",
        "# We are passing the predictors columns\n",
        "#beacuse we want to use then to make the prediction"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "sisOB2f4hgH0",
        "outputId": "f52208b0-236f-4205-e93b-a26e83337a24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_FIxMf8fw9Lz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = reg.predict(TEST[predictors])"
      ],
      "metadata": {
        "id": "lSwl8G1YjcKY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r4CJfSCopsei",
        "outputId": "55d28f37-3906-4c5e-e280-8d3491310433"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(153,)"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TEST[\"predictions\"] = predictions"
      ],
      "metadata": {
        "id": "5pVLMP9apxlF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TEST.loc[TEST[\"predictions\"] < 0, \"predictions\"] = 0\n",
        "TEST[\"predictions\"] = TEST[\"predictions\"].round()"
      ],
      "metadata": {
        "id": "qo8iaQqzp864"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "error = mean_absolute_error(TEST[\"Rating\"], TEST[\"predictions\"])\n",
        "error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r9uKPd_zqbZr",
        "outputId": "8a23bf81-7f97-420e-c162-41dcc6057f2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5228758169934641"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()[\"Rating\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G-u3Uqu2qnb-",
        "outputId": "e92b239d-3092-47e1-b19e-94ce3c726ad6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    515.000000\n",
              "mean       5.100971\n",
              "std        1.964049\n",
              "min        0.000000\n",
              "25%        4.000000\n",
              "50%        5.000000\n",
              "75%        6.000000\n",
              "max       10.000000\n",
              "Name: Rating, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TEST[\"predictions\"] = predictions"
      ],
      "metadata": {
        "id": "PTE8G1M7q13L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TEST[TEST[\"Airline_Name\"] == \"Aer Lingus\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 100
        },
        "id": "xslsX1TYr1qv",
        "outputId": "19afbad3-5d66-4c73-e6b2-bde2167a1ed0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Airline_Name  Food_&_Beverages  Inflight_Entertainment  Seat_Comfort  \\\n",
              "3   Aer Lingus                 3                       2             3   \n",
              "\n",
              "   Staff_Service  Value_for_Money  Review_Count  Rating  predictions  \n",
              "3              4                3           789       6     5.308741  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee90f85b-6762-46fc-ba0c-9a5777fa0230\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Airline_Name</th>\n",
              "      <th>Food_&amp;_Beverages</th>\n",
              "      <th>Inflight_Entertainment</th>\n",
              "      <th>Seat_Comfort</th>\n",
              "      <th>Staff_Service</th>\n",
              "      <th>Value_for_Money</th>\n",
              "      <th>Review_Count</th>\n",
              "      <th>Rating</th>\n",
              "      <th>predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Aer Lingus</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>789</td>\n",
              "      <td>6</td>\n",
              "      <td>5.308741</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee90f85b-6762-46fc-ba0c-9a5777fa0230')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ee90f85b-6762-46fc-ba0c-9a5777fa0230 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ee90f85b-6762-46fc-ba0c-9a5777fa0230');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"TEST[TEST[\\\"Airline_Name\\\"] == \\\"Aer Lingus\\\"]\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Airline_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Aer Lingus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food_&_Beverages\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inflight_Entertainment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2,\n        \"max\": 2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seat_Comfort\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Staff_Service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4,\n        \"max\": 4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value_for_Money\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 789,\n        \"max\": 789,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6,\n        \"max\": 6,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.308740780803992,\n        \"max\": 5.308740780803992,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.308740780803992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TEST[TEST[\"Airline_Name\"] == \"Aegean Airlines\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "id": "WYHOnm8xse41",
        "outputId": "2c394d66-3f78-47fd-caa8-3ea5d1929a10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Airline_Name  Food_&_Beverages  Inflight_Entertainment  Seat_Comfort  \\\n",
              "2  Aegean Airlines                 4                       2             4   \n",
              "\n",
              "   Staff_Service  Value_for_Money  Review_Count  Rating  predictions  \n",
              "2              4                4           605       8     7.051378  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1a7513e-b352-4f9b-a9b3-2c69827417ab\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Airline_Name</th>\n",
              "      <th>Food_&amp;_Beverages</th>\n",
              "      <th>Inflight_Entertainment</th>\n",
              "      <th>Seat_Comfort</th>\n",
              "      <th>Staff_Service</th>\n",
              "      <th>Value_for_Money</th>\n",
              "      <th>Review_Count</th>\n",
              "      <th>Rating</th>\n",
              "      <th>predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Aegean Airlines</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>605</td>\n",
              "      <td>8</td>\n",
              "      <td>7.051378</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1a7513e-b352-4f9b-a9b3-2c69827417ab')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b1a7513e-b352-4f9b-a9b3-2c69827417ab button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b1a7513e-b352-4f9b-a9b3-2c69827417ab');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"TEST[TEST[\\\"Airline_Name\\\"] == \\\"Aegean Airlines\\\"]\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Airline_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Aegean Airlines\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food_&_Beverages\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4,\n        \"max\": 4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inflight_Entertainment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2,\n        \"max\": 2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seat_Comfort\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4,\n        \"max\": 4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Staff_Service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4,\n        \"max\": 4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value_for_Money\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4,\n        \"max\": 4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 605,\n        \"max\": 605,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          605\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 8,\n        \"max\": 8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 7.051377749613908,\n        \"max\": 7.051377749613908,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7.051377749613908\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "2xliNNrJrAsW",
        "outputId": "20e14426-1d7b-4c23-ad23-a0204b1fd18c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Airline_Name  Food_&_Beverages  Inflight_Entertainment  \\\n",
              "0          AB Aviation                 2                       0   \n",
              "1        Adria Airways                 3                       2   \n",
              "2      Aegean Airlines                 4                       2   \n",
              "3           Aer Lingus                 3                       2   \n",
              "4             Aero VIP                 0                       0   \n",
              "..                 ...               ...                     ...   \n",
              "510  XL Airways France                 3                       2   \n",
              "511   Yakutia Airlines                 3                       0   \n",
              "512     Yangon Airways                 4                       0   \n",
              "513            Yemenia                 0                       0   \n",
              "514      Yeti Airlines                 3                       0   \n",
              "\n",
              "     Seat_Comfort  Staff_Service  Value_for_Money  Review_Count  Rating  \n",
              "0               3              3                2             3       4  \n",
              "1               3              3                3            91       6  \n",
              "2               4              4                4           605       8  \n",
              "3               3              4                3           789       6  \n",
              "4               4              4                4             3       9  \n",
              "..            ...            ...              ...           ...     ...  \n",
              "510             2              3                3            78       5  \n",
              "511             3              3                4             4       6  \n",
              "512             5              4                4             4       9  \n",
              "513             0              0                4            24       4  \n",
              "514             3              3                4             3       6  \n",
              "\n",
              "[515 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8be6bbb-7e49-400b-a6bb-46c8cd4c6afd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Airline_Name</th>\n",
              "      <th>Food_&amp;_Beverages</th>\n",
              "      <th>Inflight_Entertainment</th>\n",
              "      <th>Seat_Comfort</th>\n",
              "      <th>Staff_Service</th>\n",
              "      <th>Value_for_Money</th>\n",
              "      <th>Review_Count</th>\n",
              "      <th>Rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AB Aviation</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adria Airways</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>91</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Aegean Airlines</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>605</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Aer Lingus</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>789</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Aero VIP</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>510</th>\n",
              "      <td>XL Airways France</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>78</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>511</th>\n",
              "      <td>Yakutia Airlines</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>512</th>\n",
              "      <td>Yangon Airways</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>513</th>\n",
              "      <td>Yemenia</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>24</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>514</th>\n",
              "      <td>Yeti Airlines</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>515 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8be6bbb-7e49-400b-a6bb-46c8cd4c6afd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8be6bbb-7e49-400b-a6bb-46c8cd4c6afd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8be6bbb-7e49-400b-a6bb-46c8cd4c6afd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-175283dc-a223-4b46-b391-7456fdff78ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-175283dc-a223-4b46-b391-7456fdff78ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-175283dc-a223-4b46-b391-7456fdff78ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 515,\n  \"fields\": [\n    {\n      \"column\": \"Airline_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 514,\n        \"samples\": [\n          \"Mango Airlines\",\n          \"Volaris\",\n          \"TACA Regional\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food_&_Beverages\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inflight_Entertainment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seat_Comfort\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Staff_Service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value_for_Money\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 450,\n        \"min\": 1,\n        \"max\": 3748,\n        \"num_unique_values\": 224,\n        \"samples\": [\n          5,\n          83,\n          255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Trainig the MOdel, with the entire data **"
      ],
      "metadata": {
        "id": "c6Nlfc6Rurav"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Hypothesis**\n",
        "\n",
        "We can predict What would be the Airline will get more Rating by using historical data"
      ],
      "metadata": {
        "id": "7PzvkjpPvNRI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Data\n",
        "\n"
      ],
      "metadata": {
        "id": "8Griiin4vzVm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import pandas as pd\n",
        "air_reviews= pd.read_csv(\"/content/drive/MyDrive/DataSet/Airline_Reviews.csv\")"
      ],
      "metadata": {
        "id": "PX1EIn5jvERc"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Review the Coorelation tha Rating has with the others columns\n",
        "\n",
        "air_reviews.corr()[\"Rating\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8F06ADkbviYT",
        "outputId": "613ef991-2f96-4906-954c-2b0b2b5c6940"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-e7e9f470d824>:3: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  air_reviews.corr()[\"Rating\"]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Food_&_Beverages          0.517388\n",
              "Inflight_Entertainment    0.146295\n",
              "Seat_Comfort              0.625659\n",
              "Staff_Service             0.613897\n",
              "Value_for_Money           0.805385\n",
              "Review_Count             -0.031188\n",
              "Rating                    1.000000\n",
              "Name: Rating, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import Sklear Lybrary"
      ],
      "metadata": {
        "id": "fszhJCq_zSDS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Sklear is a packages which came with is as machine learning library in Python\n",
        "# In this secction we use LinearRegression\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Initialize the regression\n",
        "\n",
        "reg = LinearRegression()"
      ],
      "metadata": {
        "id": "zH2-RvEMwBrl"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#This represent the columns use to make the prediction\n",
        "\n",
        "Predictors = [\"Staff_Service\",\"Value_for_Money\",\"Inflight_Entertainment\"]"
      ],
      "metadata": {
        "id": "8WFqcRKV1Ayf"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create The MOdel\n",
        "\n",
        "reg.fit(air_reviews[Predictors], air_reviews[\"Rating\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "p5b8oxK3wpwP",
        "outputId": "f615b99b-1ac3-4184-fc63-161c2d456d7d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Creta NEW** **COLUMN**"
      ],
      "metadata": {
        "id": "iJpd4Gs8xbEP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# PREDictions: This is a variable containing some data, from DataFrame.\n",
        "# The contents of this variable will be assigned to the new column in air_reviews.\n",
        "\n",
        "PREDictions = reg.predict(air_reviews[Predictors])"
      ],
      "metadata": {
        "id": "fpCysK2F4oSc"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "PREDictions.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wrtdNEV-4yQQ",
        "outputId": "35fd713c-b1d4-414a-f9af-176395ccd6dc"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(515,)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**This part is to check the level of error our model have :**"
      ],
      "metadata": {
        "id": "krS72gYHukrq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bassicly, the line of code is adding a new column named \"PREDictions\" to the air_reviews DataFrame and populating it with the values contained in the PREDictions variable."
      ],
      "metadata": {
        "id": "dbfAIvx7ykMy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#[\"PREDictions\"]: This is specifying the name of the new column that will be added to the air_reviews\n",
        "\n",
        "air_reviews[\"PREDictions\"] = PREDictions"
      ],
      "metadata": {
        "id": "XwFgroN75Hk-"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "air_reviews[\"PREDictions\"] = air_reviews[\"PREDictions\"].round()\n",
        "\n",
        "#.round(): This method is being called on the values in the \"predictions\" column.\n",
        "# It rounds each value to the nearest integer. The .round() method is a built-in method in Pandas,\n",
        "# a Python library for data manipulation and analysis, and it's commonly used to round numerical values"
      ],
      "metadata": {
        "id": "ft2v56wd5L8R"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Check the error :\n",
        "\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "error = mean_absolute_error(air_reviews[\"Rating\"], air_reviews[\"PREDictions\"])\n",
        "error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Szob8kFD5ZyW",
        "outputId": "2071c77a-09ae-4720-cbf8-8b6f373e149c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7766990291262136"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**mean_absolute_error**: This is likely a function from a library like scikit-learn in Python. This function calculates the mean absolute error between two arrays or lists of numbers. The mean absolute error is a measure of how close predictions are to the actual values, calculated as the average of the absolute differences between predicted and actual values.\n",
        "\n",
        "**(air_reviews[\"Rating\"], air_reviews[\"PREDictions\"]):** This part of the code passes two arguments to the mean_absolute_error function\n"
      ],
      "metadata": {
        "id": "u0FOIPUS036Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "air_reviews[air_reviews[\"Inflight_Entertainment\"]==5]\n",
        "\n",
        "\n",
        "#[...]: This attempts to filter the air_reviews based on the condition provided in the brackets.\n",
        "# And air_reviews[\"Inflight_Entertainment\"]: This extracts the column named \"Inflight_Entertainment\"\n",
        "# from the DataFrame air_reviews."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 246
        },
        "id": "RlNep7Na2KGm",
        "outputId": "c63e03dc-97e9-4090-9ed4-bd8f18b6557b"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Airline_Name  Food_&_Beverages  Inflight_Entertainment  \\\n",
              "289  Loch Lomond Seaplanes                 0                       5   \n",
              "302         Malmo Aviation                 5                       5   \n",
              "331               Nordavia                 5                       5   \n",
              "370     Red Wings Airlines                 4                       5   \n",
              "\n",
              "     Seat_Comfort  Staff_Service  Value_for_Money  Review_Count  Rating  \\\n",
              "289             5              5                5             2       8   \n",
              "302             5              5                5             9       7   \n",
              "331             3              4                2             4       6   \n",
              "370             4              5                3             2       5   \n",
              "\n",
              "     PREDictions  \n",
              "289     8.543220  \n",
              "302     8.543220  \n",
              "331     4.024983  \n",
              "370     5.776926  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e3441603-265c-421a-838f-77085a5d4754\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Airline_Name</th>\n",
              "      <th>Food_&amp;_Beverages</th>\n",
              "      <th>Inflight_Entertainment</th>\n",
              "      <th>Seat_Comfort</th>\n",
              "      <th>Staff_Service</th>\n",
              "      <th>Value_for_Money</th>\n",
              "      <th>Review_Count</th>\n",
              "      <th>Rating</th>\n",
              "      <th>PREDictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>289</th>\n",
              "      <td>Loch Lomond Seaplanes</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>8.543220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>302</th>\n",
              "      <td>Malmo Aviation</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>8.543220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>Nordavia</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>4.024983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>Red Wings Airlines</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>5.776926</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3441603-265c-421a-838f-77085a5d4754')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e3441603-265c-421a-838f-77085a5d4754 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e3441603-265c-421a-838f-77085a5d4754');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ba93c54a-31d4-45ca-9372-2804f0dcece8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba93c54a-31d4-45ca-9372-2804f0dcece8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ba93c54a-31d4-45ca-9372-2804f0dcece8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# from the DataFrame air_reviews\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Airline_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Malmo Aviation\",\n          \"Red Wings Airlines\",\n          \"Loch Lomond Seaplanes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food_&_Beverages\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inflight_Entertainment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 5,\n        \"max\": 5,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seat_Comfort\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 5,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Staff_Service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 4,\n        \"max\": 5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Value_for_Money\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 5,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2,\n        \"max\": 9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 5,\n        \"max\": 8,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PREDictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.221167045299427,\n        \"min\": 4.024982900073957,\n        \"max\": 8.54321977435496,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          8.54321977435496\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    }
  ]
}